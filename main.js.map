{"version":3,"file":"main.js","mappings":"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","sources":["webpack://ajs-diploma/./src/js/GamePlay.js","webpack://ajs-diploma/./src/js/utils.js","webpack://ajs-diploma/./src/js/themes.js","webpack://ajs-diploma/./src/js/cursors.js","webpack://ajs-diploma/./src/js/Character.js","webpack://ajs-diploma/./src/js/characters/Bowman.js","webpack://ajs-diploma/./src/js/characters/Swordsman.js","webpack://ajs-diploma/./src/js/characters/Magician.js","webpack://ajs-diploma/./src/js/characters/Undead.js","webpack://ajs-diploma/./src/js/characters/Daemon.js","webpack://ajs-diploma/./src/js/characters/Vampire.js","webpack://ajs-diploma/./src/js/generators.js","webpack://ajs-diploma/./src/js/Team.js","webpack://ajs-diploma/./src/js/PositionedCharacter.js","webpack://ajs-diploma/./src/js/GameState.js","webpack://ajs-diploma/./src/js/app.js","webpack://ajs-diploma/./src/js/GameStateService.js","webpack://ajs-diploma/./src/js/GameController.js"],"sourcesContent":["import { calcHealthLevel, calcTileType } from './utils';\n\nexport default class GamePlay {\n  constructor() {\n    this.boardSize = 8;\n    this.container = null;\n    this.boardEl = null;\n    this.cells = [];\n    this.cellClickListeners = [];\n    this.cellEnterListeners = [];\n    this.cellLeaveListeners = [];\n    this.newGameListeners = [];\n    this.saveGameListeners = [];\n    this.loadGameListeners = [];\n  }\n\n  bindToDOM(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n    this.container = container;\n  }\n\n  /**\n   * Draws boardEl with specific theme\n   *\n   * @param theme\n   */\n  drawUi(theme) {\n    this.checkBinding();\n\n    this.container.innerHTML = `\n      <div class=\"controls\">\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\n      </div>\n      <div class=\"board-container\">\n        <div data-id=\"board\" class=\"board\"></div>\n      </div>\n    `;\n\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\n\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\n\n    this.boardEl = this.container.querySelector('[data-id=board]');\n\n    this.boardEl.classList.add(theme);\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\n      const cellEl = document.createElement('div');\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\n      this.boardEl.appendChild(cellEl);\n    }\n\n    this.cells = Array.from(this.boardEl.children);\n  }\n\n  /**\n   * Draws positions (with chars) on boardEl\n   *\n   * @param positions array of PositionedCharacter objects\n   */\n  redrawPositions(positions) {\n    for (const cell of this.cells) {\n      cell.innerHTML = '';\n    }\n\n    for (const position of positions) {\n      const cellEl = this.boardEl.children[position.position];\n      const charEl = document.createElement('div');\n      charEl.classList.add('character', position.character.type);\n\n      const healthEl = document.createElement('div');\n      healthEl.classList.add('health-level');\n\n      const healthIndicatorEl = document.createElement('div');\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\n      healthIndicatorEl.style.width = `${position.character.health}%`;\n      healthEl.appendChild(healthIndicatorEl);\n\n      charEl.appendChild(healthEl);\n      cellEl.appendChild(charEl);\n    }\n  }\n\n  /**\n   * Add listener to mouse enter for cell\n   *\n   * @param callback\n   */\n  addCellEnterListener(callback) {\n    this.cellEnterListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse leave for cell\n   *\n   * @param callback\n   */\n  addCellLeaveListener(callback) {\n    this.cellLeaveListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse click for cell\n   *\n   * @param callback\n   */\n  addCellClickListener(callback) {\n    this.cellClickListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"New Game\" button click\n   *\n   * @param callback\n   */\n  addNewGameListener(callback) {\n    this.newGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Save Game\" button click\n   *\n   * @param callback\n   */\n  addSaveGameListener(callback) {\n    this.saveGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Load Game\" button click\n   *\n   * @param callback\n   */\n  addLoadGameListener(callback) {\n    this.loadGameListeners.push(callback);\n  }\n\n  onCellEnter(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellLeave(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellClick(event) {\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellClickListeners.forEach((o) => o.call(null, index));\n  }\n\n  onNewGameClick(event) {\n    event.preventDefault();\n    this.newGameListeners.forEach((o) => o.call(null));\n  }\n\n  onSaveGameClick(event) {\n    event.preventDefault();\n    this.saveGameListeners.forEach((o) => o.call(null));\n  }\n\n  onLoadGameClick(event) {\n    event.preventDefault();\n    this.loadGameListeners.forEach((o) => o.call(null));\n  }\n\n  static showError(message) {\n    alert(message);\n  }\n\n  static showMessage(message) {\n    alert(message);\n  }\n\n  selectCell(index, color) {\n    this.deselectCell(index);\n    this.cells[index].classList.add('selected', `selected-${color}`);\n  }\n\n  deselectCell(index) {\n    if (index || index === 0) {\n      const cell = this.cells[index];\n      cell.classList.remove(...Array.from(cell.classList)\n        .filter((o) => o.startsWith('selected')));\n    }\n  }\n\n  showCellTooltip(message, index) {\n    this.cells[index].title = message;\n  }\n\n  hideCellTooltip(index) {\n    this.cells[index].title = '';\n  }\n\n  showDamage(index, damage) {\n    return new Promise((resolve) => {\n      const cell = this.cells[index];\n      const damageEl = document.createElement('span');\n      damageEl.textContent = damage;\n      damageEl.classList.add('damage');\n      cell.appendChild(damageEl);\n\n      damageEl.addEventListener('animationend', () => {\n        cell.removeChild(damageEl);\n        resolve();\n      });\n    });\n  }\n\n  setCursor(cursor) {\n    this.boardEl.style.cursor = cursor;\n  }\n\n  checkBinding() {\n    if (this.container === null) {\n      throw new Error('GamePlay not bind to DOM');\n    }\n  }\n}\n","/**\n * @todo\n * @param index - индекс поля\n * @param boardSize - размер квадратного поля (в длину или ширину)\n * @returns строка - тип ячейки на поле:\n *\n * top-left\n * top-right\n * top\n * bottom-left\n * bottom-right\n * bottom\n * right\n * left\n * center\n *\n * @example\n * ```js\n * calcTileType(0, 8); // 'top-left'\n * calcTileType(1, 8); // 'top'\n * calcTileType(63, 8); // 'bottom-right'\n * calcTileType(7, 7); // 'left'\n * ```\n * */\nexport function calcTileType(index, boardSize) {\n  // TODO: ваш код будет тут\n  if (index === 0) {\n    return 'top-left';\n  }\n\n  if (index > 0 && index < 7) {\n    return 'top';\n  }\n\n  if (index === 7) {\n    return 'top-right';\n  }\n\n  if (index === 56) {\n    return 'bottom-left';\n  }\n\n  if (index === 63) {\n    return 'bottom-right';\n  }\n\n  if (index > 56 && index < 63) {\n    return 'bottom';\n  }\n\n  if (index % boardSize === 0) {\n    return 'left';\n  }\n\n  if (index % boardSize === 7) {\n    return 'right';\n  }\n\n  return 'center';\n}\n\nexport function calcHealthLevel(health) {\n  if (health < 15) {\n    return 'critical';\n  }\n\n  if (health < 50) {\n    return 'normal';\n  }\n\n  return 'high';\n}\n","const themes = {\n  prairie: 'prairie',\n  desert: 'desert',\n  arctic: 'arctic',\n  mountain: 'mountain',\n};\n\nexport default themes;\n","const cursors = {\n  auto: 'auto',\n  pointer: 'pointer',\n  crosshair: 'crosshair',\n  notallowed: 'not-allowed',\n};\n\nexport default cursors;\n","/**\n * Базовый класс, от которого наследуются классы персонажей\n * @property level - уровень персонажа, от 1 до 4\n * @property attack - показатель атаки\n * @property defence - показатель защиты\n * @property health - здоровье персонажа\n * @property type - строка с одним из допустимых значений:\n * swordsman\n * bowman\n * magician\n * daemon\n * undead\n * vampire\n */\nexport default class Character {\n  constructor(level, type) {\n    this.level = level;\n    this.attack = 0;\n    this.defence = 0;\n    this.health = 50;\n    this.type = type;\n    // TODO: выбросите исключение, если кто-то использует \"new Character()\"\n    if (new.target.name !== 'Bowman'\n        && new.target.name !== 'Swordsman'\n        && new.target.name !== 'Magician'\n        && new.target.name !== 'Vampire'\n        && new.target.name !== 'Undead'\n        && new.target.name !== 'Daemon') {\n      throw new Error('Нельзя напрямую вызывать класс Character');\n    }\n  }\n}\n","import Character from '../Character';\n\nexport default class Bowman extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 25;\n    this.defence = 25;\n  }\n}\n","import Character from '../Character';\n\nexport default class Swordsman extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 40;\n    this.defence = 10;\n  }\n}\n","import Character from '../Character';\n\nexport default class Magician extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 10;\n    this.defence = 40;\n  }\n}\n","import Character from '../Character';\n\nexport default class Undead extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 40;\n    this.defence = 10;\n  }\n}\n","import Character from '../Character';\n\nexport default class Daemon extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 10;\n    this.defence = 10;\n  }\n}\n","import Character from '../Character';\n\nexport default class Vampire extends Character {\n  constructor(level, type) {\n    super(level, type);\n    this.attack = 25;\n    this.defence = 25;\n  }\n}\n","import Bowman from './characters/Bowman';\nimport Swordsman from './characters/Swordsman';\nimport Magician from './characters/Magician';\nimport Undead from './characters/Undead';\nimport Daemon from './characters/Daemon';\nimport Vampire from './characters/Vampire';\n\n/**\n * Формирует экземпляр персонажа из массива allowedTypes со\n * случайным уровнем от 1 до maxLevel\n *\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @returns генератор, который при каждом вызове\n * возвращает новый экземпляр класса персонажа\n *\n */\nexport function* characterGenerator(allowedTypes, maxLevel) {\n  // TODO: write logic here\n  const rndInd = Math.floor(Math.random() * allowedTypes.length);\n  const rndLvl = Math.floor(Math.random() * maxLevel) + 1;\n  const typeOfCharacter = allowedTypes[rndInd];\n  if (typeOfCharacter === 'Bowman') {\n    yield new Bowman(rndLvl, 'bowman');\n  }\n\n  if (typeOfCharacter === 'Swordsman') {\n    yield new Swordsman(rndLvl, 'swordsman');\n  }\n\n  if (typeOfCharacter === 'Magician') {\n    yield new Magician(rndLvl, 'magician');\n  }\n\n  if (typeOfCharacter === 'Undead') {\n    yield new Undead(rndLvl, 'undead');\n  }\n\n  if (typeOfCharacter === 'Daemon') {\n    yield new Daemon(rndLvl, 'daemon');\n  }\n\n  if (typeOfCharacter === 'Vampire') {\n    yield new Vampire(rndLvl, 'vampire');\n  }\n}\n\n/**\n * Формирует массив персонажей на основе characterGenerator\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @param characterCount количество персонажей, которое нужно сформировать\n * @returns экземпляр Team, хранящий экземпляры персонажей.\n * Количество персонажей в команде - characterCount\n * */\nexport default function generateTeam(allowedTypes, maxLevel, characterCount) {\n  // TODO: write logic here\n  const characters = [];\n  for (let i = 0; i < characterCount; i += 1) {\n    characters.push(characterGenerator(allowedTypes, maxLevel).next().value);\n  }\n  return characters;\n}\n\n/**\n * Функция получение случайной позиции\n * @param параметр принадлежности к команде игрока или компьютера\n * @usedPositions массив занятых позиций\n * Возвращает случайную позицию\n * Не должно быть совпадений позиций у персонажей\n */\nexport function generatePosition(player, usedPositions) {\n  let index = 0; // участвует в изначальной расстановке команд\n  const allowedPositions = []; // массив разрешённых позиций\n\n  if (player !== 'player' && player !== 'computer') {\n    throw new Error('Параметр передаваемый в функцию generatePosition() должен быть \"Player\" либо \"Computer\"');\n  }\n  if (player === 'player') {\n    index = 0;\n  }\n  if (player === 'computer') {\n    index = 6;\n  }\n\n  for (let i = 0; i < 8; i += 1) {\n    if (!usedPositions.includes((i * 8) + index)) {\n      allowedPositions.push((i * 8) + index);\n    }\n    if (!usedPositions.includes((i * 8) + index + 1)) {\n      allowedPositions.push((i * 8) + index + 1);\n    }\n  }\n  const randomPozition = Math.floor(Math.random() * allowedPositions.length);\n  return allowedPositions[randomPozition];\n}\n\n/**\n * Функция получения позиций для атаки\n * @range параметр дальности атаки персонажа\n * @index позиция выбранного персонажа\n * Возвращает массив возможных позиций для атаки\n */\nfunction getAttackRange(range, index) {\n  const rangeList = [];\n  const limitRow = [];\n  const limitColumn = [];\n  let position;\n\n  // ограничение справа и слева\n  for (let i = (index % 8) - range; i <= (index % 8) + range; i += 1) {\n    if (i >= 0 && i < 8) {\n      limitRow.push(i);\n    }\n  }\n\n  // ограничение снузу и сверху\n  for (let i = Math.floor(index / 8) - range; i <= Math.floor(index / 8) + range; i += 1) {\n    if (i >= 0 && i < 8) {\n      limitColumn.push(i);\n    }\n  }\n\n  for (let i = -range; i < range + 1; i += 1) {\n    for (let j = -range; j < range + 1; j += 1) {\n      position = index + i * 8 + j;\n      if (position !== index // исключение позиции выбранного персонажа\n      && !rangeList.includes(position) // исключение повторяющихся значений\n      && position >= 0 // ограничение сверху поля\n      && position < 64 // ограничение снизу поля\n      && limitRow.indexOf(position % 8) >= 0 // ограничение слева и справа\n      && limitColumn.indexOf(Math.floor(position / 8)) >= 0) { // ограничение сверху и снизу\n        rangeList.push(position);\n      }\n    }\n  }\n  return rangeList;\n}\n\n/**\n * Функция получения позиций для атаки\n * @char параметр персонажа\n * @index позиция выбранного персонажа\n * Возвращает массив возможных позиций для атаки\n */\nexport function getPositionsToAttack(char, index) {\n  let positionsToAttack = [];\n  if (char === 'swordsman' || char === 'undead') {\n    positionsToAttack = getAttackRange(1, index);\n  }\n  if (char === 'bowman' || char === 'vampire') {\n    positionsToAttack = getAttackRange(2, index);\n  }\n  if (char === 'magician' || char === 'daemon') {\n    positionsToAttack = getAttackRange(4, index);\n  }\n  return positionsToAttack;\n}\n\n/**\n * Функция получения позиций для хода\n * @range параметр дальности атаки персонажа\n * @index позиция выбранного персонажа\n * @characterList  массив занятых позиций\n * Возвращает массив возможных позиций для хода\n */\nfunction getMoveRange(range, index, characterList) {\n  const usedPositions = characterList.map((item) => item.position);\n  const rangeList = [];\n  const limitRow = [];\n  const limitColumn = [];\n  let position = 0;\n\n  // ограничение справа и слева\n  for (let i = (index % 8) - range; i <= (index % 8) + range; i += 1) {\n    if (i >= 0 && i < 8) {\n      limitRow.push(i);\n    }\n  }\n\n  // ограничение снузу и сверху\n  for (let i = Math.floor(index / 8) - range; i <= Math.floor(index / 8) + range; i += 1) {\n    if (i >= 0 && i < 8) {\n      limitColumn.push(i);\n    }\n  }\n\n  for (let i = -range; i < range + 1; i += 1) {\n    const x = i === 0 ? range : Math.abs(i);\n    const y = i === 0 ? 1 : Math.abs(i);\n    for (let j = -x; j < x + 1; j += y) {\n      position = index + i * 8 + j;\n      if (position !== index // исключение позиции выбранного персонажа\n      && !usedPositions.includes(position) // исключение занятого поля\n      && Math.floor(position / 8) === Math.floor(index / 8) + i\n      && position >= 0 // ограничение сверху поля\n      && position < 64 // ограничение снизу поля\n      // && position >= index - (range * 8) - range\n      // && position <= index + (range * 8) + range\n      && limitRow.indexOf(position % 8) >= 0 // ограничение слева и справа\n      && limitColumn.indexOf(Math.floor(position / 8)) >= 0) { // ограничение сверху и снизу\n      // && limit.indexOf(position % 8) >= 0) { // ограничение слева и справа поля\n        rangeList.push(position);\n      }\n    }\n  }\n  return rangeList;\n}\n\nexport function getPositionsToMove(char, index, characterList) {\n  let positionsToMove = [];\n  if (char === 'swordsman' || char === 'undead') {\n    positionsToMove = getMoveRange(4, index, characterList);\n  }\n  if (char === 'bowman' || char === 'vampire') {\n    positionsToMove = getMoveRange(2, index, characterList);\n  }\n  if (char === 'magician' || char === 'daemon') {\n    positionsToMove = getMoveRange(1, index, characterList);\n  }\n  return positionsToMove;\n}\n","/**\n * Класс, представляющий персонажей команды\n *\n * @todo Самостоятельно продумайте хранение персонажей в классе\n * Например\n * @example\n * ```js\n * const characters = [new Swordsman(2), new Bowman(1)]\n * const team = new Team(characters);\n *\n * team.characters // [swordsman, bowman]\n * ```\n * */\nexport default class Team {\n  // TODO: write your logic here\n  constructor(characters) {\n    this.characters = characters;\n  }\n\n  * [Symbol.iterator]() {\n    let i = 0;\n    while (i < this.characters.length) {\n      yield this.characters[i];\n      i += 1;\n    }\n  }\n}\n","import Character from './Character';\n\nexport default class PositionedCharacter {\n  constructor(character, position) {\n    if (!(character instanceof Character)) {\n      throw new Error('character must be instance of Character or its children');\n    }\n\n    if (typeof position !== 'number') {\n      throw new Error('position must be a number');\n    }\n\n    this.character = character;\n    this.position = position;\n  }\n}\n","export default class GameState {\n  constructor() {\n    this.running = true;\n    this.level = 1;\n    this.turn = 'player';\n    this.selectedCell = null;\n    this.selectedCharacter = '';\n  }\n\n  changeTurn() {\n    this.turn = this.turn === 'player' ? 'computer' : 'player';\n  }\n}\n","/**\n * Entry point of app: don't change this\n */\nimport GamePlay from './GamePlay';\nimport GameController from './GameController';\nimport GameStateService from './GameStateService';\n\nconst gamePlay = new GamePlay();\ngamePlay.bindToDOM(document.querySelector('#game-container'));\n\nconst stateService = new GameStateService(localStorage);\n\nconst gameCtrl = new GameController(gamePlay, stateService);\ngameCtrl.init();\n\n// don't write your code here\n","export default class GameStateService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  save(state) {\n    this.storage.setItem('state', JSON.stringify(state));\n  }\n\n  load() {\n    try {\n      return JSON.parse(this.storage.getItem('state'));\n    } catch (e) {\n      throw new Error('Invalid state');\n    }\n  }\n}\n","import themes from './themes';\nimport cursor from './cursors';\nimport generateTeam from './generators';\nimport { generatePosition, getPositionsToAttack, getPositionsToMove } from './generators';\nimport Team from './Team';\nimport PositionedCharacter from './PositionedCharacter';\nimport GameState from './GameState';\nimport GamePlay from './GamePlay';\n\nexport default class GameController {\n  \n  constructor(gamePlay, stateService) {\n    this.gamePlay = gamePlay;\n    this.stateService = stateService;\n    this.gameState = new GameState();\n    this.playerTeam = [];\n    this.computerTeam = [];\n    this.characterList = [];\n  }\n\n  init() { \n    this.startNewGame();\n    // подпишем клетки на события мыши\n    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));\n    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));\n    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));\n    // подпишем кнопки на нажатия\n    this.gamePlay.addNewGameListener(this.startNewGame.bind(this));\n    this.gamePlay.addSaveGameListener(this.saveGame.bind(this));\n    this.gamePlay.addLoadGameListener(this.loadGame.bind(this));\n  }\n\n  onCellClick(index) { // react to click\n    if (this.gameState.running) { // если игра запущена\n      // выбор персонажа на клетке\n      const char = this.characterList.find(item => item.position === index);\n      const positionToMove = getPositionsToMove(this.gameState.selectedCharacter, this.gameState.selectedCell, this.characterList);\n      if (char) {\n        const positionToAttack = getPositionsToAttack(this.gameState.selectedCharacter, this.gameState.selectedCell);\n        if (char.character.type === 'bowman' ||\n            char.character.type === 'swordsman' ||\n            char.character.type === 'magician') {\n              this.gamePlay.deselectCell(this.gameState.selectedCell);\n              this.gamePlay.selectCell(index, 'yellow');\n              this.gameState.selectedCharacter = char.character.type;\n              this.gameState.selectedCell = index;\n        } else if (positionToAttack.indexOf(index) >= 0) {\n          let attacker = this.characterList.find(item => item.position === this.gameState.selectedCell).character;\n          let target = char.character;\n          let damage = Math.max((attacker.attack - target.defence) * 0.2, attacker.attack * 0.1);\n          damage = Math.floor(damage);\n          target.health -= damage;\n          if (target.health < 1) {\n            this.computerTeam.length -= 1;\n            this.characterList = this.characterList.filter(item => item.position !== index);\n          } \n          this.gamePlay.redrawPositions(this.characterList);\n          if (this.computerTeam.length === 0) {\n            if (this.gameState.level === 4) {\n              this.gameState.running = false;\n              GamePlay.showMessage('Победа');\n              return;\n            }\n            this.gameState.level += 1;\n            this.levelUp();\n            this.gameState.selectedCell = null;\n            this.gameState.selectedCharacter = '';\n            this.startNextLevel();\n          }\n          this.gameState.running = false\n          this.gamePlay.showDamage(index, damage).then(() => {\n            setTimeout(() => {\n              this.gameState.changeTurn();\n              this.gameState.running = true;\n              this.enemyTurn();\n            }, 50);\n          \n          });\n        }\n        else {\n          GamePlay.showError('Можно выделять только персонажей игрока');\n        }\n      } else if (positionToMove.indexOf(index) >= 0) {\n        this.characterList.map(item => {\n          if (item.position === this.gameState.selectedCell) {\n            item.position = index;\n            this.gamePlay.deselectCell(this.gameState.selectedCell);\n            this.gameState.selectedCell = index;\n            this.gamePlay.selectCell(index, 'yellow');\n          }\n        })\n        this.gamePlay.redrawPositions(this.characterList);\n        this.enemyTurn();\n      } else { \n        GamePlay.showError('Пустая клетка');\n      }\n    }\n  }\n\n  onCellEnter(index) { // react to mouse \n    if (this.gameState.running) {\n      const char = this.characterList.find(item => item.position === index);\n      if (char) {\n        this.gamePlay.setCursor(cursor.pointer);\n        const message = this.characterInf(char.character);\n        // `🎖️${char.character.level}⚔${char.character.attack}🛡${char.character.defence}❤${char.character.health}`;\n        this.gamePlay.showCellTooltip(message, index);\n        const positionsToAttack = getPositionsToAttack(this.gameState.selectedCharacter, this.gameState.selectedCell);\n        if (char.character.type === 'undead' || \n            char.character.type === 'vampire' || \n            char.character.type === 'daemon') {\n          if (positionsToAttack.indexOf(index) >= 0) {\n            this.gamePlay.setCursor(cursor.crosshair);\n          } else {\n            this.gamePlay.setCursor(cursor.notallowed);\n          }\n        } \n      } else {\n        const positionToMove = getPositionsToMove(this.gameState.selectedCharacter, this.gameState.selectedCell, this.characterList);\n        if (positionToMove.indexOf(index) >= 0) {\n          this.gamePlay.selectCell(index, 'green');\n        }\n      }\n    }\n  }\n\n  onCellLeave(index) { // react to mouse leave\n    this.gamePlay.hideCellTooltip(index);\n    this.gamePlay.setCursor(cursor.auto);\n    if (index !== this.gameState.selectedCell) {\n      this.gamePlay.deselectCell(index);\n    }\n  }\n\n  startNewGame() { // старт новой игры\n    this.clearAll();\n    this.startNextLevel();\n  }\n\n  saveGame() { // сохраняем параметры игры\n    const state = {};\n    state.running = this.gameState.running;\n    state.level = this.gameState.level;\n    state.turn = this.gameState.turn;\n    state.selectedCell = this.gameState.selectedCell;\n    state.selectedCharacter = this.gameState.selectedCharacter;\n    state.playerTeam = this.playerTeam;\n    state.computerTeam = this.computerTeam;\n    state.characterList = this.characterList;\n    this.stateService.save(state);\n    GamePlay.showMessage('Game is saved');\n  }\n\n  loadGame() { // загружаем сохранённую игру\n    try {\n      const state = this.stateService.load();\n      this.gameState.running = state.running;\n      this.gameState.level = state.level;\n      this.gameState.turn = state.turn;\n      this.gamePlay.deselectCell(this.gameState.selectedCell);\n      this.gameState.selectedCell = state.selectedCell;\n      if (this.gameState.selectedCell) {\n        this.gamePlay.selectCell(this.gameState.selectedCell, 'yellow');\n      }\n      this.gameState.selectedCharacter = state.selectedCharacter;\n      this.playerTeam = state.playerTeam;\n      this.computerTeam = state.computerTeam;\n      this.characterList = state.characterList;\n      this.drawingPlan(this.gameState.level);\n      this.gamePlay.redrawPositions(this.characterList);\n      GamePlay.showMessage('Игра загружена');\n    } \n    catch {\n      GamePlay.showError('Нет сохранённой игры');\n    }\n  }\n\n  clearAll() { // обновление параметров\n    this.playerTeam = [];\n    this.computerTeam = [];\n    this.characterList = [];\n    this.gameState.level = 1;\n    this.gameState.running = true;\n  }\n\n  startNextLevel() { // старт нового уровня\n    this.drawingPlan(this.gameState.level); // отрисуем поле\n    this.generateNewTeam('player'); // создаём команду игрока\n    this.generateNewTeam('computer'); // создаём команду компьютера\n    this.positionTeam('player');\n    this.positionTeam('computer');\n    this.drawingCharacters();\n  }\n\n  drawingPlan(level) { // отрисовка поля\n    let theme = '';\n    if (level === 1) {\n      theme = themes.prairie;\n    }\n    if (level === 2) {\n      theme = themes.desert;\n    }\n    if (level === 3) {\n      theme = themes.arctic;\n    }\n    if (level === 4) {\n      theme = themes.mountain;\n    }\n    this.gamePlay.drawUi(theme);\n  }\n\n  generateNewTeam(player) { // создание команды\n    if (player === 'player') {\n      const arr = this.characterList.map(item => item); // временный массив\n      this.playerTeam = [];\n      for (let char of arr) {\n        if (char.character.type === 'bowman' ||\n            char.character.type === 'swordsman' ||\n            char.character.type === 'magician') {\n              this.playerTeam.push(char.character);\n              this.characterList.shift();\n        }\n      }\n      const number = 4 - this.playerTeam.length;\n      if (number) {\n        const team = generateTeam(['Bowman', 'Swordsman', 'Magician'], 1, number);\n        this.playerTeam = this.playerTeam.concat(...team);\n      }\n    }\n    if (player === 'computer') {\n      const arr = this.characterList; // временный массив\n      this.computerTeam = [];\n      for (let char of arr) {\n        if (char.character.type === 'undead' ||\n            char.character.type === 'vampire' ||\n            char.character.type === 'daemon') {\n              this.computerTeam.push(char.character);\n              this.characterList.shift();\n        }\n      }\n      const number = 4 - this.computerTeam.length;\n      if (number) {\n        const team = generateTeam(['Undead', 'Daemon', 'Vampire'], 1, number);\n        this.computerTeam = this.computerTeam.concat(team);\n      }\n    }\n  }\n\n  positionTeam(player) { // расстановка команды\n    const team = player === 'player' ? this.playerTeam : this.computerTeam;\n    const usedPositions = []; // массив занятых позиций\n    for (let char of team) {\n      // сгенерируем случайную позицию\n      const position = generatePosition(player, usedPositions);\n      // положим эту позицию в массив занятых позиций\n      usedPositions.push(position);\n      // создадим объект типа PositionedCharacter и положим его в массив\n      const positionedCharacter = new PositionedCharacter(char, position);\n      this.characterList.push(positionedCharacter);\n    }\n  }\n\n  drawingCharacters() { // отрисовка персонажей\n    this.gamePlay.redrawPositions(this.characterList);\n  }\n\n  levelUp() {\n    let i = 0;\n    for (let item of this.characterList) {\n      const char = item.character;\n      char.level += 1;\n      char.attack = Math.max(char.attack, char.attack * (80 + char.health) / 100);\n      char.attack = Math.floor(char.attack);\n      char.defence = Math.max(char.defence, char.defence * (80 + char.health) / 100);\n      char.defence = Math.floor(char.defence);\n      char.health = char.health + 80 <= 100 ? char.health + 80 : 100;\n      item.character = char;\n      this.characterList[i] = item;\n      i++;\n    }\n  }\n\n  characterInf(character) {\n    return `🎖${character.level} ⚔${character.attack} 🛡${character.defence} ❤${character.health}`;\n  }\n\n  enemyTurn() { // ход компьютера\n    const playerTeam = [];\n    const computerTeam = [];\n    let maxDamage = {\n      damage: 0\n    };\n    for (let char of this.characterList) {\n      if (char.character.type === 'bowman' ||\n          char.character.type === 'swordsman' ||\n          char.character.type === 'magician') {\n            playerTeam.push(char);\n      }\n      if (char.character.type === 'undead' ||\n          char.character.type === 'vampire' ||\n          char.character.type === 'daemon') {\n            const attacker = char.character;\n            const attackerPosition = char.position;\n            computerTeam.push(char);\n            const positionsToAttack = getPositionsToAttack(char.character.type, char.position);\n            for (let char of playerTeam) {\n              if (positionsToAttack.indexOf(char.position) >= 0) {\n                let target = char.character;\n                let damage = Math.max((attacker.attack - target.defence) * 0.2, attacker.attack * 0.1);\n                damage = Math.floor(damage);\n                if (damage > maxDamage.damage) {\n                  maxDamage.damage = damage;\n                  maxDamage.attackerPosition = attackerPosition;\n                  maxDamage.defenderPosition = char.position;\n                }\n              }\n            }\n      }\n    }\n    if (maxDamage.damage > 0) {\n      const target = this.characterList.find(item => item.position === maxDamage.defenderPosition);\n      target.character.health -= maxDamage.damage;\n      if (target.character.health < 1) {\n        this.gameState.selectedCell = null;\n        this.gameState.selectedCharacter = '';\n        this.gamePlay.deselectCell(target.position);\n        this.playerTeam.length -= 1;\n        this.characterList = this.characterList.filter(item => item.position !== target.position);\n      }\n      this.gameState.running = false;\n      this.gamePlay.showDamage(target.position, maxDamage.damage).then(() => \n      setTimeout(() => {\n        this.gameState.running = true;\n        this.gameState.changeTurn();\n        this.gamePlay.redrawPositions(this.characterList);\n      }, 100));\n     \n      // this.gamePlay.deselectCell(this.gameState.selectedCell);\n      // this.gameState.selectedCell = 64;\n      if(playerTeam.length = 0) {\n        this.startNextLevel();\n      }\n      return;\n    }  \n    let rnd = Math.floor(Math.random() * this.computerTeam.length);\n    const char = computerTeam[rnd];\n    const positionsToMove = getPositionsToMove(char.character.type, char.position, this.characterList);\n    rnd = Math.floor(Math.random() * positionsToMove.length);\n    char.position = positionsToMove[rnd];\n    this.gamePlay.redrawPositions(this.characterList);\n    console.log(positionsToMove);\n\n  }\n}\n"],"names":["GamePlay","constructor","this","boardSize","container","boardEl","cells","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","Error","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","classList","add","i","cellEl","document","createElement","index","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","positions","cell","position","charEl","character","type","healthEl","healthIndicatorEl","health","style","width","addCellEnterListener","callback","push","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","static","message","alert","selectCell","color","deselectCell","remove","filter","startsWith","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","Character","level","attack","defence","name","Bowman","super","Swordsman","Magician","Undead","Daemon","Vampire","characterGenerator","allowedTypes","maxLevel","rndInd","Math","floor","random","length","rndLvl","typeOfCharacter","generateTeam","characterCount","characters","next","value","generatePosition","player","usedPositions","allowedPositions","includes","getAttackRange","range","rangeList","limitRow","limitColumn","j","getPositionsToAttack","char","positionsToAttack","getMoveRange","characterList","map","item","x","abs","y","getPositionsToMove","positionsToMove","Team","Symbol","iterator","PositionedCharacter","GameState","running","turn","selectedCell","selectedCharacter","changeTurn","gamePlay","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","gameState","playerTeam","computerTeam","init","startNewGame","bind","saveGame","loadGame","find","positionToMove","positionToAttack","attacker","target","max","showMessage","levelUp","startNextLevel","then","setTimeout","enemyTurn","showError","characterInf","clearAll","drawingPlan","generateNewTeam","positionTeam","drawingCharacters","themes","arr","shift","number","team","concat","positionedCharacter","maxDamage","attackerPosition","defenderPosition","rnd","console","log"],"sourceRoot":""}